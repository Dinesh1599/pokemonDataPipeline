{
	"name": "insertPokedex",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inputFile",
						"type": "DatasetReference"
					},
					"name": "Source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          UniqeIdentifier as string,",
				"          {No.} as string,",
				"          Name as string,",
				"          name_url as string,",
				"          HP as string,",
				"          Att as string,",
				"          Def as string,",
				"          {S.Att} as string,",
				"          {S.Def} as string,",
				"          Spd as string,",
				"          {Ph.Sweep} as string,",
				"          {Sp.Sweep} as string,",
				"          Wall as string,",
				"          {Ph.Tank} as string,",
				"          {Sp.Tank} as string,",
				"          PrimaryType as string,",
				"          SecondaryType as string,",
				"          Ability as string,",
				"          {Ability Gen} as string,",
				"          {Ability Category} as string,",
				"          {Activation Requirement} as string,",
				"          Gen as string,",
				"          {Male%} as string,",
				"          {Female%} as string,",
				"          against_Normal as string,",
				"          against_Fire as string,",
				"          against_Water as string,",
				"          against_Electric as string,",
				"          against_Grass as string,",
				"          against_Ice as string,",
				"          against_Fight as string,",
				"          against_Poison as string,",
				"          against_Ground as string,",
				"          against_Flying as string,",
				"          against_Psychic as string,",
				"          against_Bug as string,",
				"          against_Rock as string,",
				"          against_Ghost as string,",
				"          against_Dragon as string,",
				"          against_Dark as string,",
				"          against_Steel as string,",
				"          against_Fairy as string,",
				"          {Height (m)} as string,",
				"          {Weight (kg)} as string,",
				"          {Capture Rate} as string,",
				"          {Base Happiness} as string,",
				"          {Base Egg Steps} as string,",
				"          {Experience Growth} as string,",
				"          mega_evolution as string,",
				"          overall_legendary as string,",
				"          final_stage as string,",
				"          regional_form as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> Source",
				"Source select(mapColumn(",
				"          National_Number = {No.},",
				"          Gen,",
				"          English_Name = Name,",
				"          Primary_Type = PrimaryType,",
				"          Secondary_Type = SecondaryType,",
				"          HP,",
				"          Attack = Att,",
				"          Defense = Def,",
				"          Sp_Attack = {S.Att},",
				"          Sp_Defense = {S.Def},",
				"          Speed = Spd,",
				"          Ability,",
				"          Mega_Evolution = mega_evolution",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(National_Number,",
				"          Gen,",
				"          English_Name,",
				"          Primary_Type,",
				"          Secondary_Type,",
				"          HP,",
				"          Attack,",
				"          Defense,",
				"          Sp_Attack,",
				"          Sp_Defense,",
				"          Speed,",
				"          Mega_Evolution),",
				"     Ability = collect(Ability)) ~> aggregate1",
				"aggregate1 derive(Ability1 = Ability[1],",
				"          Ability2 = Ability[2],",
				"          Ability3 = iif(size(Ability) > 2, Ability[3], ''),",
				"          Mega_Evolution = toBoolean(Mega_Evolution)) ~> derivedColumn1",
				"lookup1 select(mapColumn(",
				"          National_Number = aggregate1@National_Number,",
				"          Gen,",
				"          English_Name,",
				"          Primary_Type = aggregate1@Primary_Type,",
				"          Secondary_Type = aggregate1@Secondary_Type,",
				"          HP,",
				"          Attack,",
				"          Defense,",
				"          Sp_Attack,",
				"          Sp_Defense,",
				"          Speed,",
				"          Mega_Evolution,",
				"          Ability = Ability1,",
				"          Ability_2 = Ability2,",
				"          Ability_3 = Ability3,",
				"          Base_Total",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate1 aggregate(groupBy(National_Number,",
				"          Primary_Type,",
				"          Secondary_Type,",
				"          Ability),",
				"     Base_Total = sum(toInteger(Attack)+toInteger(Defense)+toInteger(Sp_Attack)+toInteger(Sp_Defense)+toInteger(HP)+toInteger(Speed))) ~> aggregate2",
				"derivedColumn1, aggregate2 lookup(aggregate1@National_Number == aggregate2@National_Number,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     input(",
				"          sno as integer,",
				"          National_Number as integer,",
				"          Gen as integer,",
				"          English_Name as string,",
				"          Primary_Type as string,",
				"          Secondary_Type as string,",
				"          HP as integer,",
				"          Attack as integer,",
				"          Defense as integer,",
				"          Sp_Attack as integer,",
				"          Sp_Defense as integer,",
				"          Speed as integer,",
				"          Is_PseudoLegendary as boolean,",
				"          Is_Legendary as boolean,",
				"          Is_Mythical as boolean,",
				"          Gigantamax as boolean,",
				"          Mega_Evolution as boolean,",
				"          Base_Total as integer,",
				"          Ability as string,",
				"          Ability_2 as string,",
				"          Ability_3 as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     booleanFormat: ['1', '0'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}