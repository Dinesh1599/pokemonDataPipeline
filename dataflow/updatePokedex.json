{
	"name": "updatePokedex",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "updatePokedex",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          National_Number as string,",
				"          Gen as string,",
				"          English_Name as string,",
				"          Primary_Type as string,",
				"          Secondary_Type as string,",
				"          HP as string,",
				"          Attack as string,",
				"          Defense as string,",
				"          Sp_Attack as string,",
				"          Sp_Defense as string,",
				"          Speed as string,",
				"          Is_PseudoLegendary as string,",
				"          Is_Legendary as string,",
				"          Is_Mythical as string,",
				"          Gigantamax as string,",
				"          Mega_Evolution as string,",
				"          Base_Total as string,",
				"          Ability as string,",
				"          Ability_2 as string,",
				"          Ability_3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          sno as integer,",
				"          National_Number as integer,",
				"          Gen as integer,",
				"          English_Name as string,",
				"          Primary_Type as string,",
				"          Secondary_Type as string,",
				"          HP as integer,",
				"          Attack as integer,",
				"          Defense as integer,",
				"          Sp_Attack as integer,",
				"          Sp_Defense as integer,",
				"          Speed as integer,",
				"          Is_PseudoLegendary as boolean,",
				"          Is_Legendary as boolean,",
				"          Is_Mythical as boolean,",
				"          Gigantamax as boolean,",
				"          Mega_Evolution as boolean,",
				"          Base_Total as integer,",
				"          Ability as string,",
				"          Ability_2 as string,",
				"          Ability_3 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(Is_PseudoLegendary = toBoolean(Is_PseudoLegendary),",
				"          Is_Legendary = toBoolean(Is_Legendary),",
				"          Is_Mythical = toBoolean(Is_Mythical),",
				"          Mega_Evolution = toBoolean(Mega_Evolution),",
				"          Gen = toInteger(Gen),",
				"          National_Number = toInteger(National_Number),",
				"          HP = toInteger(HP),",
				"          Attack = toInteger(Attack),",
				"          Defense = toInteger(Defense),",
				"          Sp_Attack = toInteger(Sp_Attack),",
				"          Sp_Defense = toInteger(Sp_Defense),",
				"          Speed = toInteger(Speed),",
				"          Base_Total = toInteger(Base_Total),",
				"          Gigantamax = toBoolean(Gigantamax),",
				"          Primary_Type = lower(trim(Primary_Type)),",
				"          Secondary_Type = lower(trim(Secondary_Type))) ~> derivedColumn1",
				"derivedColumn1, select1 join(derivedColumn1@National_Number == select1@National_Number",
				"     && derivedColumn1@Primary_Type == select1@Primary_Type",
				"     && derivedColumn1@Secondary_Type == select1@Secondary_Type,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"source2 select(mapColumn(",
				"          National_Number,",
				"          Primary_Type,",
				"          Secondary_Type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join1 alterRow(updateIf(derivedColumn1@National_Number==select1@National_Number&&derivedColumn1@Primary_Type==select1@Primary_Type&&derivedColumn1@Secondary_Type==select1@Secondary_Type)) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          sno as integer,",
				"          National_Number as integer,",
				"          Gen as integer,",
				"          English_Name as string,",
				"          Primary_Type as string,",
				"          Secondary_Type as string,",
				"          HP as integer,",
				"          Attack as integer,",
				"          Defense as integer,",
				"          Sp_Attack as integer,",
				"          Sp_Defense as integer,",
				"          Speed as integer,",
				"          Is_PseudoLegendary as boolean,",
				"          Is_Legendary as boolean,",
				"          Is_Mythical as boolean,",
				"          Gigantamax as boolean,",
				"          Mega_Evolution as boolean,",
				"          Base_Total as integer,",
				"          Ability as string,",
				"          Ability_2 as string,",
				"          Ability_3 as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['National_Number','Primary_Type','Secondary_Type'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          National_Number = derivedColumn1@National_Number,",
				"          Gen,",
				"          English_Name,",
				"          Primary_Type = derivedColumn1@Primary_Type,",
				"          Secondary_Type = derivedColumn1@Secondary_Type,",
				"          HP,",
				"          Attack,",
				"          Defense,",
				"          Sp_Attack,",
				"          Sp_Defense,",
				"          Speed,",
				"          Is_PseudoLegendary,",
				"          Is_Legendary,",
				"          Is_Mythical,",
				"          Gigantamax,",
				"          Mega_Evolution,",
				"          Base_Total,",
				"          Ability,",
				"          Ability_2,",
				"          Ability_3",
				"     )) ~> sink1"
			]
		}
	}
}